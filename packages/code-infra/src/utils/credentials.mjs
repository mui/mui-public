/**
 * Secure credential storage for CLI tools
 *
 * This file was generated by Claude Code to provide secure credential storage
 * for the MUI code infrastructure tools. It uses OS keychain/credential manager
 * to store all credentials in a single JSON object.
 *
 * @generated by Claude Code
 */

import { AsyncEntry } from '@napi-rs/keyring';

export const KEYRING_SERVICE = 'mui-code-infra';

export const ERRORS = {
  NOT_FOUND: 'CREDENTIAL_NOT_FOUND',
  STORAGE_FAILURE: 'CREDENTIAL_STORAGE_FAILURE',
};

class CredentialManager {
  /**
   * @type {Map<string, AsyncEntry>}
   */
  #credentials = new Map();

  /**
   * @type {Map<string, string>} In-memory cache for credentials that have been accessed.
   * This is used to avoid multiple prompts for the same credential during a single run.
   * Note: This cache is not persisted and will be cleared when the process exits
   */
  #accessedCredentials = new Map();

  constructor(serviceName = KEYRING_SERVICE) {
    this.serviceName = serviceName;
  }

  /**
   * @param {string} key
   * @returns {Promise<string | undefined>}
   */
  async getPassword(key) {
    if (this.#accessedCredentials.has(key)) {
      return this.#accessedCredentials.get(key);
    }
    let credential = this.#credentials.get(key);
    if (!credential) {
      credential = new AsyncEntry(this.serviceName, key);
      this.#credentials.set(key, credential);
    }
    const res = await credential.getPassword();
    if (res) {
      this.#accessedCredentials.set(key, res);
    }
    return res;
  }

  /**
   * @param {string} key
   * @param {string} password
   * @returns {Promise<void>}
   */
  async setPassword(key, password) {
    this.#accessedCredentials.set(key, password);
    let credential = this.#credentials.get(key);
    if (!credential) {
      credential = new AsyncEntry(this.serviceName, key);
      this.#credentials.set(key, credential);
    }
    await credential.setPassword(password);
  }

  /**
   * @param {string} key
   * @returns {Promise<void>}
   */
  async deleteKey(key) {
    this.#accessedCredentials.delete(key);
    const credential = this.#credentials.get(key);
    if (credential) {
      await credential.deletePassword();
      this.#credentials.delete(key);
    }
  }
}

export const credentialManager = new CredentialManager();
