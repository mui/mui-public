/**
 * Secure credential storage for CLI tools
 *
 * This file was generated by Claude Code to provide secure credential storage
 * for the MUI code infrastructure tools. It uses OS keychain/credential manager
 * to store all credentials in a single JSON object.
 *
 * @generated by Claude Code
 */

import { AsyncEntry } from '@napi-rs/keyring';

const KEYRING_SERVICE = 'mui-code-infra';
const REGISTRY_KEY = '__credential_registry__';

export const ERRORS = {
  NOT_FOUND: 'CREDENTIAL_NOT_FOUND',
  STORAGE_FAILURE: 'CREDENTIAL_STORAGE_FAILURE',
};

/**
 * Gets all stored credentials from the registry
 * @returns {Promise<Record<string, string>>} Object containing all credentials
 */
export async function getCredentialData() {
  try {
    const registryEntry = new AsyncEntry(KEYRING_SERVICE, REGISTRY_KEY);
    const registryData = await registryEntry.getPassword();
    return registryData ? JSON.parse(registryData) : {};
  } catch (error) {
    return {}; // Registry doesn't exist yet
  }
}

/**
 * Updates the registry with all credential data
 * @param {Record<string, string>} credentials - Object containing all credentials
 * @returns {Promise<void>}
 */
async function updateCredentialData(credentials) {
  try {
    const registryEntry = new AsyncEntry(KEYRING_SERVICE, REGISTRY_KEY);
    await registryEntry.setPassword(JSON.stringify(credentials));
  } catch (/** @type {any} */ error) {
    throw new Error(`Failed to update credential data: ${error.message}`);
  }
}

/**
 * Gets a credential from the stored JSON data
 * @param {string} key - The credential key to retrieve
 * @returns {Promise<string>} The credential value
 * @throws {Error} If credential doesn't exist
 */
export async function getCredential(key) {
  try {
    const credentials = await getCredentialData();

    if (!(key in credentials)) {
      throw new Error(ERRORS.NOT_FOUND);
    }

    return credentials[key];
  } catch (/** @type {any} */ error) {
    if (error.message === ERRORS.NOT_FOUND) {
      throw error;
    }
    throw new Error(`Failed to get credential '${key}': ${error.message}`);
  }
}

/**
 * Clears all stored credentials from keychain
 * @returns {Promise<void>}
 */
export async function clearCredentials() {
  try {
    const registryEntry = new AsyncEntry(KEYRING_SERVICE, REGISTRY_KEY);
    await registryEntry.deletePassword();
  } catch (error) {
    // Registry might not exist, ignore error
  }
}

/**
 * Lists all stored credential keys (without showing the values)
 * @returns {Promise<string[]>} Array of credential keys
 */
export async function listCredentials() {
  try {
    const credentials = await getCredentialData();
    return Object.keys(credentials);
  } catch (/** @type {any} */ error) {
    throw new Error(`Failed to list credentials: ${error.message}`);
  }
}

/**
 * Removes a specific credential by key
 * @param {string[]} keys - The credential key to remove
 * @returns {Promise<void>} True if credential was found and removed, false if not found
 */
export async function removeCredential(...keys) {
  try {
    const credentials = await getCredentialData();

    keys.forEach((key) => {
      if (key in credentials) {
        delete credentials[key];
      }
    });

    // Update the stored data
    await updateCredentialData(credentials);
  } catch (/** @type {any} */ error) {
    throw new Error(`Failed to remove credential(s) '${keys.join(', ')}': ${error.message}`);
  }
}

/**
 * Stores a credential directly without prompting (for programmatic use)
 * @param {string} key - The credential key
 * @param {string} value - The credential value
 * @returns {Promise<void>}
 */
export async function setCredential(key, value) {
  try {
    const credentials = await getCredentialData();

    // Update the credential in the object
    credentials[key] = value;

    // Update the stored data
    await updateCredentialData(credentials);
  } catch (/** @type {any} */ error) {
    throw new Error(`Failed to set credential '${key}': ${error.message}`);
  }
}
