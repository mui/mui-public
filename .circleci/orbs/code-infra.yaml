version: 2.1

commands:
  install-deps:
    description: 'Installs JavaScript dependencies using pnpm'
    parameters:
      browsers:
        type: boolean
        default: false
        description: 'Set to true if you intend to install any browser (for example with playwright).'
      package-overrides:
        description: 'A space separated list of package@version to override during installation'
        type: string
        default: ''
      ignore-workspace:
        description: 'Set to true to ignore the pnpm workspace (useful for single-package repositories)'
        type: boolean
        default: false
    steps:
      - run:
          name: Set npm registry public signing keys
          command: |
            echo "export COREPACK_INTEGRITY_KEYS='$(curl https://registry.npmjs.org/-/npm/v1/keys | jq -c '{npm: .keys}')'" >> $BASH_ENV
      - when:
          condition: << parameters.browsers >>
          steps:
            - run:
                name: Install pnpm package manager
                command: corepack enable
      - when:
          condition:
            not: << parameters.browsers >>
          steps:
            - run:
                name: Install pnpm package manager
                # See https://stackoverflow.com/a/73411601
                command: corepack enable --install-directory ~/bin
      - run:
          name: View install environment
          command: |
            node --version
            pnpm --version
      - when:
          condition: << parameters.ignore-workspace >>
          steps:
            - run:
                name: Initialize single-package repository
                command: pnpm install --ignore-workspace
      - when:
          condition:
            not: << parameters.ignore-workspace >>
          steps:
            - run:
                name: Install js dependencies
                command: |
                  packages="<< parameters.package-overrides >>"

                  if [[ -z "$packages" ]]; then
                    pnpm install
                    exit 0
                  fi

                  IFS=' '
                  set -- $packages
                  pkg_array=("$@")
                  unset IFS

                  new_filtered=""
                  filtered=""
                  for pkg in "${pkg_array[@]}"; do
                    if [[ ! "$pkg" =~ @stable$ ]]; then
                      filtered="$filtered $pkg"
                      if [[ "$pkg" == *"@"* ]]; then
                        new_filtered="$new_filtered $pkg"
                      fi
                    fi
                  done

                  args="${new_filtered# }"
                  if [ -n "$args" ]; then
                    pnpm dlx @mui/internal-code-infra@canary set-version-overrides --pkg $args
                  else
                    pnpm install
                  fi

  run-linters:
    description: 'Runs all code linters'
    steps:
      - run:
          name: ESLint
          command: pnpm eslint:ci
      - run:
          name: Stylelint
          command: pnpm stylelint
      - run:
          name: Lint Markdown
          command: pnpm markdownlint
      - run:
          name: Lint writing style
          command: pnpm valelint

  upload-coverage:
    description: 'Uploads code coverage to Codecov'
    parameters:
      key:
        type: string
        default: 'jsdom'
        description: 'The Codecov upload key suffix.'
    steps:
      - run:
          name: Check if coverage report is generated
          command: |
            if ! [[ -s coverage/lcov.info ]]
            then
              exit 1
            fi
      - run:
          name: Upload coverage report to Codecov
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov -t ${CODECOV_TOKEN} -Z -F "$REACT_VERSION-<< parameters.key >>"

  check-static-changes:
    description: 'Checks code changes after running static analysis tools'
    steps:
      - run:
          name: '`pnpm dedupe` was run?'
          command: |
            # #default-branch-switch
            if [[ $(git diff --name-status master | grep -E 'pnpm-workspace\.yaml|pnpm-lock.yaml|package\.json') == "" ]];
            then
                echo "No changes to dependencies detected. Skipping..."
            else
                pnpm dedupe --check
            fi
      - run:
          name: '`pnpm prettier` changes committed?'
          command: |
            # #target-branch-reference
            if [[ $(git diff --name-status master | grep pnpm-lock) == "" ]];
            then
                pnpm prettier --check
            else
                pnpm exec prettier --check . --ignore-path .lintignore
            fi

  test-package:
    description: 'Runs package build validations. "test:package" scripts must be defined in packages.'
    steps:
      - run:
          name: Build packages
          command: pnpm release:build
      - run:
          name: Validate type declarations
          command: pnpm code-infra validate-built-types
      - run:
          name: Verify built packages
          command: pnpm -r test:package
      - run:
          name: create and upload a size snapshot
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_ARTIFACTS
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_ARTIFACTS
            export AWS_REGION=$AWS_REGION_ARTIFACTS
            pnpm size:snapshot
