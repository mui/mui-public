name: Branch Monitor

on:
  push:
    branches: ['**']

# Configure repository variables in Settings > Secrets and variables > Actions > Variables:
# - MONITOR_BRANCH: Branch to monitor (required)
# - MONITOR_ISSUE_NUMBER: Issue number to update (required)

env:
  BRANCH_NAME: ${{ vars.MONITOR_BRANCH }}
  ISSUE_NUMBER: ${{ vars.MONITOR_ISSUE_NUMBER }}

concurrency:
  group: branch-monitor-${{ vars.MONITOR_BRANCH }}
  cancel-in-progress: true

jobs:
  monitor:
    runs-on: ubuntu-latest
    if: github.ref_name == vars.MONITOR_BRANCH
    permissions:
      issues: write
      checks: read
    timeout-minutes: 60

    steps:
      - name: Monitor Branch Status
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const issueNumber = parseInt(process.env.ISSUE_NUMBER);
            const COMMENT_MARKER = '<!-- branch-monitor-failure-comment -->';
            const POLL_INTERVAL = 30; // seconds
            const MAX_POLLS = 120; // 60 minutes total

            // Get commit data from the push event
            const commitSha = context.sha;
            const commitUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${commitSha}`;
            const commitMessage = context.payload.head_commit.message;
            const commitAuthor = context.payload.head_commit.author.name;
            const commitDate = context.payload.head_commit.timestamp;

            console.log(`Monitoring checks for commit ${commitSha} on branch ${branchName}`);
            console.log(`Current workflow run ID: ${process.env.GITHUB_RUN_ID}`);

            // Poll for check completion
            let polls = 0;
            let overallStatus = 'pending';

            while (polls < MAX_POLLS) {
              polls++;
              console.log(`Poll ${polls}/${MAX_POLLS} - checking status...`);

              // Get combined status (external checks like CircleCI)
              const { data: combinedStatus } = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: commitSha
              });

              // Get check runs (GitHub Actions and modern checks)
              const { data: checks } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: commitSha,
                per_page: 100
              });

              // Combine into single array with normalized structure
              const allChecks = [
                // External statuses (don't filter - won't be this monitor)
                ...combinedStatus.statuses.map(status => ({
                  name: status.context,
                  state: status.state,
                  type: 'status'
                })),
                // GitHub check runs (filter out this monitor using run ID)
                ...checks.check_runs
                  .filter(check => 
                    check.check_suite.id !== parseInt(process.env.GITHUB_RUN_ID)
                  )
                  .map(check => ({
                    name: check.name,
                    state: check.conclusion || check.status,
                    type: 'check'
                  }))
              ];

              console.log(`Found ${allChecks.length} total checks for commit ${commitSha}`);
              allChecks.forEach(check => {
                console.log(`- ${check.type}: ${check.name}: ${check.state}`);
              });

              if (allChecks.length === 0) {
                console.log('No checks found yet, continuing to poll...');
                await new Promise(resolve => setTimeout(resolve, POLL_INTERVAL * 1000));
                continue;
              }

              // Check if all are completed
              const states = allChecks.map(check => check.state);
              const allCompleted = states.every(s => 
                s === 'success' || s === 'failure' || s === 'error' || s === 'cancelled' || s === 'timed_out' || s === 'skipped'
              );

              console.log(`All states: [${states.join(', ')}]`);
              console.log(`All completed: ${allCompleted}`);

              if (allCompleted) {
                // Determine overall status
                if (states.every(s => s === 'success' || s === 'skipped')) {
                  overallStatus = 'success';
                } else if (states.some(s => s === 'failure' || s === 'timed_out' || s === 'cancelled' || s === 'error')) {
                  overallStatus = 'failure';
                } else {
                  overallStatus = 'success'; // fallback
                }
                console.log(`All checks completed with overall status: ${overallStatus}`);
                break;
              } else {
                console.log(`Checks still pending, waiting ${POLL_INTERVAL}s...`);
                await new Promise(resolve => setTimeout(resolve, POLL_INTERVAL * 1000));
              }
            }

            if (polls >= MAX_POLLS) {
              console.log('Timeout reached, using current status');
              overallStatus = 'timeout';
            }

            // Generate status display
            const statusEmojis = {
              success: '✅',
              failure: '❌',
              timeout: '⏰',
              pending: '⏳'
            };

            const emoji = statusEmojis[overallStatus] || '❓';
            const shortSha = commitSha.substring(0, 7);
            const date = new Date(commitDate).toISOString();

            const issueTitle = `Status Monitor for ${branchName} branch`;
            const issueBody = `${emoji} **${overallStatus.toUpperCase()}**

            **Latest Commit**: [\`${shortSha}\`](${commitUrl})
            **Message**: ${commitMessage.split('\n')[0]}
            **Author**: ${commitAuthor}
            **Date**: ${date}

            ---
            *Last updated: ${new Date().toISOString()}*`;

            // Update issue title and body
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              title: issueTitle,
              body: issueBody
            });

            console.log(`Updated issue #${issueNumber} with status: ${overallStatus}`);

            // Handle failure comments
            const hasFailure = overallStatus === 'failure';

            // Get existing comments
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            const existingFailureComment = comments.find(comment => 
              comment.body.includes(COMMENT_MARKER)
            );

            if (hasFailure && !existingFailureComment) {
              // Post failure comment
              const failureComment = `${COMMENT_MARKER}
            🚨 **Build Failure Detected**

            The latest commit on branch \`${branchName}\` has failed checks:
            - **Commit**: [\`${shortSha}\`](${commitUrl})
            - **Message**: ${commitMessage.split('\n')[0]}
            - **Author**: ${commitAuthor}

            Please investigate and fix the failing checks.`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: failureComment
              });

              console.log('Posted failure comment');
            } else if (!hasFailure && existingFailureComment) {
              // Remove failure comment when status is green
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingFailureComment.id
              });

              console.log('Removed failure comment - status is now green');
            }